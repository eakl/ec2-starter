#!/usr/bin/env bash

# -----
# Tests
# -----

if [[ -z "$NAME" || -z "$REGION" ]]; then
  echo "Missing \$NAME or \$REGION; this script should be called from 'setup_instance'";
  exit 1;
fi;

# --------
# Settings
# --------

# export NAME="eakl"
CIDR="0.0.0.0/0"
CIDR_BLOCK="10.0.0.0/28"
AWS_CONFIG_DIR="${CONFIG}/aws"
DELETE_VPC="${WORKING_DIR}/delete-vpc-${NAME}"
MANAGE_KEYPAIR="${EC2_STARTER_DIR}/manage_keypair"
export KEY_PAIR="aws-ec2-key-${NAME}"

# -----------------------------------------------------------------
# Create VPC, Subnet, Internet Gateway, Route Table, Security Group
# -----------------------------------------------------------------

echo "Creating a VPC..."

# Create a VPC
export vpcId=$(aws --region "$REGION" ec2 create-vpc --cidr-block "$CIDR_BLOCK" --query 'Vpc.VpcId' --output text)
aws --region "$REGION" ec2 create-tags --resources "$vpcId" --tags --tags Key=Name,Value="$NAME"
# Overwrite the default VPC DNS settings from 'false' to 'true'
aws --region "$REGION" ec2 modify-vpc-attribute --vpc-id "$vpcId" --enable-dns-support "{\"Value\":true}"
aws --region "$REGION" ec2 modify-vpc-attribute --vpc-id "$vpcId" --enable-dns-hostnames "{\"Value\":true}"

echo "Creating a Subnet..."

# Create a Subnet
export subnetId=$(aws --region "$REGION" ec2 create-subnet --vpc-id "$vpcId" --cidr-block "$CIDR_BLOCK" --query 'Subnet.SubnetId' --output text)
aws --region "$REGION" ec2 create-tags --resources "$subnetId" --tags --tags Key=Name,Value="${NAME}-subnet"
# Assign a public IPv4 address
aws --region "$REGION" ec2 modify-subnet-attribute --subnet-id "$subnetId" --map-public-ip-on-launch

echo "Creating an Internet Gateway..."

# Create an Internet Gateway to make the subnet public
export internetGatewayId=$(aws --region "$REGION" ec2 create-internet-gateway --query 'InternetGateway.InternetGatewayId' --output text)
aws --region "$REGION" ec2 create-tags --resources "$internetGatewayId" --tags --tags Key=Name,Value="${NAME}-gateway"
# Attach the Internet Gateway
aws --region "$REGION" ec2 attach-internet-gateway --vpc-id "$vpcId" --internet-gateway-id "$internetGatewayId"

echo "Creating a Route Table..."

# Create a Route Table
export routeTableId=$(aws --region "$REGION" ec2 create-route-table --vpc-id "$vpcId" --query 'RouteTable.RouteTableId' --output text)
aws --region "$REGION" ec2 create-tags --resources "$routeTableId" --tags --tags Key=Name,Value="${NAME}-route-table"
# Create a route in the route table that points all traffic (0.0.0.0/0)
aws --region "$REGION" ec2 create-route --route-table-id "$routeTableId" --destination-cidr-block "$CIDR" --gateway-id "$internetGatewayId"
# Associate the route table to the subnet
export routeTableAssoc=$(aws --region "$REGION" ec2 associate-route-table --subnet-id "$subnetId" --route-table-id "$routeTableId" --output text)

echo "Creating a Security Group..."

# Create a Security Group
export securityGroupId=$(aws --region "$REGION" ec2 create-security-group --group-name "${NAME}-security-group" --description "Security Group for ${NAME} machine" --vpc-id "$vpcId" --query 'GroupId' --output text)

# Authorize ports on security group
# SSH
aws --region "$REGION" ec2 authorize-security-group-ingress --group-id "$securityGroupId" --protocol tcp --port 22 --cidr "$CIDR"
# Jupyter notebook
aws --region "$REGION" ec2 authorize-security-group-ingress --group-id "$securityGroupId" --protocol tcp --port 9999 --cidr "$CIDR"

# ---------------
# Create Key Pair
# ---------------

echo "Creating a Key Pair..."

if [ ! -d "$AWS_CONFIG_DIR" ]; then
  mkdir "$AWS_CONFIG_DIR";
fi;

# Create a Key Pair and CHMOD it
if [ ! -f "${AWS_CONFIG_DIR}/${KEY_PAIR}.pem" ]; then
  aws --region "$REGION" ec2 create-key-pair --key-name "$KEY_PAIR" --query 'KeyMaterial' --output text > "${AWS_CONFIG_DIR}/${KEY_PAIR}.pem"
  chmod 400 "${AWS_CONFIG_DIR}/${KEY_PAIR}.pem";
fi;

# --------------------------
# Create a delete-vpc script
# --------------------------

DELETE_VPC="${DELETE_VPC}-${vpcId}"

echo "Generating the 'delete' script..."

cat > $DELETE_VPC <<EOL
#!/usr/bin/env bash

read -p "The VPC '${vpcId}' will be deleted. Do you want to continue? (y/n [n]) " -r

if [[ ! \$REPLY =~ ^[Yy]$ ]]; then
  echo "Aborted";
  exit 0;
fi;

echo "Deleting Security Group..."
aws --region "$REGION" ec2 delete-security-group --group-id "${securityGroupId}"

echo "Deleting Route Table..."
aws --region "$REGION" ec2 disassociate-route-table --association-id "${routeTableAssoc}"
aws --region "$REGION" ec2 delete-route-table --route-table-id "${routeTableId}"

echo "Deleting Internet Gateway..."
aws --region "$REGION" ec2 detach-internet-gateway --internet-gateway-id "${internetGatewayId}" --vpc-id "${vpcId}"
aws --region "$REGION" ec2 delete-internet-gateway --internet-gateway-id "${internetGatewayId}"

echo "Deleting Subnet..."
aws --region "$REGION" ec2 delete-subnet --subnet-id "${subnetId}"

echo "Deleting VPC..."
aws --region "$REGION" ec2 delete-vpc --vpc-id "${vpcId}"

echo "If you want to delete the key-pair, please call $( basename "$MANAGE_KEYPAIR" )"

rmtrash ${DELETE_VPC} ${EC2_LOCAL_CONFIG_FILE}
EOL

chmod +x "${DELETE_VPC}"

# --------------------
# Output VPC variables
# --------------------

echo
echo "All done. The VPC has been created."
echo
echo "Summary"
echo "-------"
echo "Name..................: ${NAME}"
echo "Region................: ${REGION}"
echo "VPC Id................: ${vpcId}"
echo "Subnet Id.............: ${subnetId}"
echo "Internet Gateway Id...: ${internetGatewayId}"
echo "Route Table Id........: ${routeTableId}"
echo "Route Table Assoc.....: ${routeTableAssoc}"
echo "Security Group Id.....: ${securityGroupId}"
echo
echo "Delete script.........: $( basename "${DELETE_VPC}" )"
